package operator;

import constants.PreconditionName;
import item.Box;
import item.Office;
import predicate.Predicate;

public class Push extends Operator{

	private Box b;
	private Office o1, o2;
	/**
	 * Robot pushes box b from o1 to o2
	 * Pre: robot-location(o1), box-location(b,o1), adjacent(o1,o2), empty(o2)
	 * Add: box-location(b,o2), robot-location(o2), empty(o1)
	 * Del: empty(o2), box-location(b,o1), robot-location(o1)
	 * @param b
	 * @param o1
	 * @param o2
	 */
	public Push(Box b, Office o1, Office o2){
		super();
		this.b = b;
		this.o1 = o1;
		this.o2 = o2;
		init_pre();
		init_add();
		init_del();
	}
	private void init_pre() {
		Predicate rob_loc = new predicate.RobotLocation(o1);
		this.list_preconditions.put(PreconditionName.ROBOTLOCATION, rob_loc);
		
		Predicate box_loc = new predicate.BoxLocation(b,o1);
		this.list_preconditions.put(PreconditionName.ROBOTLOCATION, box_loc);
		
		Predicate adj = new predicate.Adjacent(o1,o2);
		this.list_preconditions.put(PreconditionName.ROBOTLOCATION, adj);
		
		Predicate empt = new predicate.Empty(o2);
		this.list_preconditions.put(PreconditionName.ROBOTLOCATION, empt);
	}
	
	private void init_add() {
		Predicate box_loc = new predicate.BoxLocation(b,o1);
		this.list_preconditions.put(PreconditionName.ROBOTLOCATION, box_loc);
		
		Predicate rob_loc = new predicate.RobotLocation(o1);
		this.list_preconditions.put(PreconditionName.ROBOTLOCATION, rob_loc);
		
		Predicate empt = new predicate.Empty(o2);
		this.list_preconditions.put(PreconditionName.ROBOTLOCATION, empt);
	}
	
	private void init_del() {
		Predicate empt = new predicate.Empty(o2);
		this.list_preconditions.put(PreconditionName.ROBOTLOCATION, empt);
		
		Predicate box_loc = new predicate.BoxLocation(b,o1);
		this.list_preconditions.put(PreconditionName.ROBOTLOCATION, box_loc);
		
		Predicate rob_loc = new predicate.RobotLocation(o1);
		this.list_preconditions.put(PreconditionName.ROBOTLOCATION, rob_loc);
	}
}
