package state;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import constants.PreconditionName;
import item.Office;
import operator.CleanOffice;
import operator.Move;
import operator.Operator;
import operator.Push;
import predicate.Empty;
import predicate.Predicate;

public class State {

	private List<Predicate> predicates;
	private ArrayList<Office> offices;
	private Operator operator;
	private State nextState;
	private Office robotPosition;
	
	public State() {
		this.predicates = new ArrayList<Predicate>();
	}
	
	public State(List<Predicate> conditions) {
		this.predicates = conditions;
	}
	
	/**
	 * @return the conditions
	 */
	public List<Predicate> getConditions() {
		return predicates;
	}

	/**
	 * @param conditions 
	 * the conditions to set
	 */
	public void setConditions(List<Predicate> conditions) {
		this.predicates = conditions;
	}

	/**
	 * @return the operator
	 */
	public Operator getOperator() {
		return operator;
	}


	/**
	 * @param operator the operator to set
	 */
	public void setOperator(Operator operator) {
		this.operator = operator;
	}

	/**
	 * @return the nextState
	 */
	public State getNextState() {
		return nextState;
	}

	/**
	 * @param nextState the nextState to set
	 */
	public void setNextState(State nextState) {
		this.nextState = nextState;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((nextState == null) ? 0 : nextState.hashCode());
		result = prime * result + ((operator == null) ? 0 : operator.hashCode());
		result = prime * result + ((predicates == null) ? 0 : predicates.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		State other = (State) obj;
		
		if (predicates == null) {
			if (other.predicates != null)
				return false;
		} else if (!predicates.equals(other.predicates))
			return false;
		
		return true;
	}
	
	
	
	/**
	 * Check whether the state verifies the preconditions of the operator.
	 * @param op
	 * @param st
	 * @return
	 */
	public boolean isValidOperator(Operator op, State st){
		List<Predicate> lst_prec = (List<Predicate>) op.getList_preconditions();
		for(Predicate p : lst_prec){
			if(!st.getConditions().contains(p)){
				return false;
			}
		}
		return true;
	}
	/**
	 * Check whether a state verifies the Add_list, which is like the precondition in the regression model
	 * @param op
	 * @param st
	 * @return
	 */
	public boolean isRegressionValid(Operator op, State st){
		List<Predicate> lst_add = (List<Predicate>) op.getList_add();
		// check whether the state contains each of the predicates of the add list
		for(Predicate p : lst_add){
			if(!st.getConditions().contains(p)){
				return false;
			}
		}
		return true;
	}

	/**
	 * Add predicates to the list of conditions of a state
	 */
	public void addPredicates(List<Predicate> in){
		for(Predicate p : in){
			if(!this.predicates.contains(p)){
				this.predicates.add(p);
			}
		}
	}
	
	/**
	 * Delete predicates of the conditions list
	 */
	public void deletePredicates(List<Predicate> in){
		for(Predicate p: in){
			if(this.predicates.contains(p)){
				this.predicates.remove(p);
			}else{
				System.out.println("Not found:"+p.toString());
			}
		}
	}
	
	public String toString(){
		String out = "";
		for (Predicate p : predicates){
			out += p.toString();
		}
		return out;
	}
	
	public Office getRobotPosition(){
		for (Predicate p : predicates){
			if (p.getName().contains(PreconditionName.ROBOTLOCATION)){
				robotPosition = p.getOffice();
				return p.getOffice();
			}
		}
		return null;
	}
	
	public ArrayList<Office> getAdjacentOffices(){
		getRobotPosition();
		for (Office o1 : offices){
			
		}
	}
	/**
	 * This functions returns a list of Operators that verify the preconditions and so can be executed
	 * @return
	 */
	public ArrayList<Operator> possibleActions(){
		// first we get the position of the robot
		return null;
	}
}
